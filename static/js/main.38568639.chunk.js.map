{"version":3,"sources":["components/CommentForm.jsx","components/Comment.jsx","components/CommentList.jsx","App.js","reportWebVitals.js","index.js"],"names":["CommentForm","inputText","setInputText","comments","setComments","submitHandler","e","preventDefault","trim","console","log","id","nanoid","text","className","onChange","target","value","onKeyDown","key","type","placeholder","onClick","Comment","comment","index","useState","isEditing","setEditing","inputValue","setInputValue","editHandler","disabled","commentsCopy","findIndex","el","filter","CommentList","map","App","saveCommentsLocalStorage","useCallback","localStorage","setItem","JSON","stringify","useEffect","getItem","localComments","parse","getCommentsLocalStorage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38568639.chunk.js","sourcesContent":["import { nanoid } from \"nanoid\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nconst CommentForm = ({ inputText, setInputText, comments, setComments }) => {\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (inputText.trim() === \"\") {\r\n      console.log(\"The field is empty\");\r\n    } else {\r\n      setComments([{ id: nanoid(), text: inputText }, ...comments]);\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n  const keyPressHandler = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      submitHandler(e);\r\n    }\r\n  };\r\n  return (\r\n    <form className=\"comment-form\">\r\n      <textarea\r\n        onChange={inputTextHandler}\r\n        onKeyDown={keyPressHandler}\r\n        type=\"text\"\r\n        className=\"comment-textarea\"\r\n        value={inputText}\r\n        placeholder=\"Empty space for your comment ^_^\"\r\n      />\r\n      <button\r\n        onClick={submitHandler}\r\n        type=\"submit\"\r\n        className=\"comment-button submit-button\"\r\n      >\r\n        <AddIcon />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","import { useState } from \"react\";\r\nimport DeleteButton from \"@material-ui/icons/Delete\";\r\nimport EditButton from \"@material-ui/icons/Edit\";\r\nimport CancelButton from \"@material-ui/icons/Cancel\";\r\nimport SaveButton from \"@material-ui/icons/Save\";\r\n\r\nconst Comment = ({ text, comment, comments, setComments, index }) => {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [inputValue, setInputValue] = useState(text);\r\n\r\n  const inputHandler = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const deleteHandler = () => {\r\n    setComments(comments.filter((el) => el.id !== comment.id));\r\n  };\r\n  const editHandler = () => {\r\n    setEditing(!isEditing);\r\n  };\r\n  const saveHandler = () => {\r\n    editHandler();\r\n    const commentsCopy = [...comments];\r\n    const index = comments.findIndex((el) => el.id === comment.id);\r\n    commentsCopy[index].text = inputValue;\r\n    setComments(commentsCopy);\r\n  };\r\n  const cancelHandler = () => {\r\n    setInputValue(text);\r\n  };\r\n  return (\r\n    <li className={\"comment\" + (index === 0 ? \" selected\" : \"\")}>\r\n      {isEditing ? (\r\n        <input\r\n          className=\"comment-input\"\r\n          value={inputValue}\r\n          onChange={inputHandler}\r\n        />\r\n      ) : (\r\n        <span className=\"comment-item\">{text}</span>\r\n      )}\r\n      <div className=\"comment-button-container\">\r\n        {isEditing ? (\r\n          <>\r\n            <button\r\n              className=\"comment-button save-button\"\r\n              disabled={!inputValue}\r\n              onClick={saveHandler}\r\n            >\r\n              <SaveButton />\r\n            </button>\r\n            <button\r\n              className=\"comment-button cancel-button\"\r\n              onClick={cancelHandler}\r\n            >\r\n              <CancelButton />\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <button\r\n              className=\"comment-button edit-button\"\r\n              onClick={editHandler}\r\n            >\r\n              <EditButton />\r\n            </button>\r\n            <button\r\n              className=\"comment-button delete-button\"\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteButton />\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import Comment from \"./Comment\";\r\n\r\nconst CommentList = ({ comments, setComments }) => {\r\n  return (\r\n    <div className=\"comment-container\">\r\n      <ul className=\"comment-list\">\r\n        {comments.map((comment, index) => (\r\n          <Comment\r\n            text={comment.text}\r\n            key={comment.id}\r\n            comments={comments}\r\n            setComments={setComments}\r\n            comment={comment}\r\n            index={index}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport CommentForm from \"./components/CommentForm.jsx\";\r\nimport CommentList from \"./components/CommentList\";\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [comments, setComments] = useState([]);\r\n  const getCommentsLocalStorage = () => {\r\n    if (localStorage.getItem(\"comments\") === null) {\r\n      localStorage.setItem(\"comments\", JSON.stringify([]));\r\n    } else {\r\n      let localComments = JSON.parse(localStorage.getItem(\"comments\"));\r\n      setComments(localComments);\r\n    }\r\n  };\r\n  const saveCommentsLocalStorage = useCallback(() => {\r\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\r\n  }, [comments]);\r\n\r\n  useEffect(() => {\r\n    getCommentsLocalStorage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    saveCommentsLocalStorage();\r\n  }, [comments, saveCommentsLocalStorage]);\r\n\r\n  return (\r\n    <div className=\"comment-box\">\r\n      <CommentForm\r\n        inputText={inputText}\r\n        setComments={setComments}\r\n        comments={comments}\r\n        setInputText={setInputText}\r\n      />\r\n      <CommentList comments={comments} setComments={setComments} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}